{"version":3,"sources":["AudioPlayer.js","App.js","serviceWorker.js","index.js"],"names":["Player","props","convertTrackFileToPlaylist","tracks","newPlaylist","forEach","track","newTrack","push","shuffle","setState","playlist","array","i","length","j","Math","floor","random","handleClickPrevious","newIndex","state","currentMusicIndex","handleClickNext","fetch","mode","then","response","text","data","YAML","parse","srcUrl","this","src","showSkipControls","showJumpControls","autoPlayAfterSrcChange","onClickPrevious","onClickNext","onEnded","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8TA0FeA,E,kDAlFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAiBRC,2BAA6B,SAACC,GAC5B,IAAIC,EAAc,GAClBD,EAAM,OAAWE,SAAQ,SAAAC,GACvB,IAAIC,EAAW,GACfA,EAAQ,KAAWD,EAAK,MAAL,KACnBC,EAAQ,OAAaD,EAAK,MAAL,OACrBC,EAAQ,KAAWD,EAAK,MAAL,KACnBC,EAAQ,IAAUD,EAAK,MAAL,IAClBF,EAAYI,KAAKD,MAEnB,EAAKE,QAAQL,GAEb,EAAKM,SAAS,CACZC,SAAUP,KA/BK,EAmCnBK,QAAU,SAACG,GACT,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADD,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,OApC1B,EA0CnBI,oBAAsB,WACpB,IAAIC,EAAW,EAAKC,MAAMC,kBAAoB,EAC1CF,EAAW,IACbA,EAAW,EAAKC,MAAMV,SAASG,OAAS,GAE1C,EAAKJ,SAAS,CACZY,kBAAmBF,KAhDJ,EAoDnBG,gBAAkB,WAChB,IAAIH,EAAW,EAAKC,MAAMC,kBAAoB,EAC1CF,GAAY,EAAKC,MAAMV,SAASG,SAClCM,EAAW,GAEb,EAAKV,SAAS,CACZY,kBAAmBF,KAxDrB,EAAKC,MAAQ,CACXV,SAAU,GACVW,kBAAmB,GAJJ,E,gEAQE,IAAD,OAClBE,MAZe,+DAYG,CAChBC,KAAM,SACLC,MAAK,SAACC,GACP,OAAOA,EAASC,UACfF,MAAK,SAACG,GACP,EAAK3B,2BAA2B4B,IAAKC,MAAMF,S,+BAiD7C,IAAIG,EAAS,GAKb,OAJmC,IAA/BC,KAAKZ,MAAMV,SAASG,SACtBkB,EAASC,KAAKZ,MAAMV,SAASsB,KAAKZ,MAAMC,mBAAmBY,KAGtD,6BACL,kBAAC,IAAD,CACEC,kBAAkB,EAClBC,kBAAkB,EAClBC,wBAAwB,EACxBC,gBAAiBL,KAAKd,oBACtBoB,YAAaN,KAAKV,gBAClBiB,QAASP,KAAKV,gBACdW,IAAKF,S,GA7EQS,IAAMC,WCQZC,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d7c1d286.chunk.js","sourcesContent":["import React from 'react';\nimport AudioPlayer from 'react-h5-audio-player';\nimport 'react-h5-audio-player/lib/styles.css';\nimport YAML from 'yamljs';\n\nconst FILES_YAML = \"https://iskconnyc.nyc3.cdn.digitaloceanspaces.com/files.yaml\"\n\nclass Player extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playlist: [],\n      currentMusicIndex: 0\n    };\n  }\n\n  componentDidMount() {\n    fetch(FILES_YAML, {\n      mode: 'cors'\n    }).then((response) => {\n      return response.text();\n    }).then((data) => {\n      this.convertTrackFileToPlaylist(YAML.parse(data));\n    });\n  }\n\n  convertTrackFileToPlaylist = (tracks) => {\n    let newPlaylist = [];\n    tracks['tracks'].forEach(track => {\n      let newTrack = {}\n      newTrack['name'] = track['track']['name'];\n      newTrack['artist'] = track['track']['artist'];\n      newTrack['date'] = track['track']['date'];\n      newTrack['src'] = track['track']['url'];\n      newPlaylist.push(newTrack);\n    });\n    this.shuffle(newPlaylist);\n\n    this.setState({\n      playlist: newPlaylist\n    });\n  }\n\n  shuffle = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  handleClickPrevious = () => {\n    let newIndex = this.state.currentMusicIndex - 1;\n    if (newIndex < 0) {\n      newIndex = this.state.playlist.length - 1;\n    }\n    this.setState({\n      currentMusicIndex: newIndex\n    });\n  }\n\n  handleClickNext = () => {\n    let newIndex = this.state.currentMusicIndex + 1;\n    if (newIndex >= this.state.playlist.length) {\n      newIndex = 0;\n    }\n    this.setState({\n      currentMusicIndex: newIndex\n    });\n  }\n\n  render() {\n    let srcUrl = \"\";\n    if (this.state.playlist.length !== 0) {\n      srcUrl = this.state.playlist[this.state.currentMusicIndex].src\n    }\n\n    return <div>\n      <AudioPlayer\n        showSkipControls={true}\n        showJumpControls={false}\n        autoPlayAfterSrcChange={true}\n        onClickPrevious={this.handleClickPrevious}\n        onClickNext={this.handleClickNext}\n        onEnded={this.handleClickNext}\n        src={srcUrl}\n      />\n    </div>\n  }\n}\n\nexport default Player;\n","import React from 'react';\nimport './App.css';\nimport Player from './AudioPlayer.js'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Player/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}